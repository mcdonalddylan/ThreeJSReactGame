{"version":3,"sources":["components/ThreeJSGameContainer.tsx","components/ThreeJSHomePage.tsx","components/HomePageFunctions.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ThreeJSGameContainer","useEffect","renderer","THREE","setSize","window","innerWidth","innerHeight","camera","position","z","scene","geometry","material","color","emissive","side","flatShading","cube","add","light","set","animate","requestAnimationFrame","rotation","x","y","render","style","margin","display","ThreeJSHomePage","props","setPixelRatio","devicePixelRatio","dirLight","hemiLight","setupLights","boxGeo","boxMat","tempBox","animateBox","setupObjects","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"qKAOaA,EAAyC,WA8ClD,OA3CAC,qBAAU,WAGN,IAAIC,EAAW,IAAIC,IACnBD,EAASE,QAASC,OAAOC,WAAYD,OAAOE,aAI5C,IAAIC,EAAS,IAAIL,IAAyB,GAAIE,OAAOC,WAAWD,OAAOE,YAAa,GAAK,KACzFC,EAAOC,SAASC,EAAI,EAEpB,IAAIC,EAAQ,IAAIR,IAGZS,EAAW,IAAIT,IAAmB,EAAG,IAAK,KAC1CU,EAAW,IAAIV,IAAyB,CACxCW,MAAO,QACPC,SAAU,OACVC,KAAMb,IACNc,aAAa,IAEbC,EAAO,IAAIf,IAAYS,EAAUC,GACrCF,EAAMQ,IAAKD,GAGX,IACIE,EAAQ,IAAIjB,IAAuB,SADnB,GAEpBiB,EAAMX,SAASY,KAAK,EAAG,EAAG,GAC1BV,EAAMQ,IAAKC,IAKG,SAAVE,IACAC,sBAAuBD,GACvBJ,EAAKM,SAASC,GAAK,IACnBP,EAAKM,SAASE,GAAK,IACnBxB,EAASyB,OAAQhB,EAAOH,GAG5Bc,MAIA,qBAAKM,MAAO,CAACC,OAAQ,SAAUC,QAAS,Y,eC9CnCC,EAAoC,SAACC,GA2B9C,OAzBA/B,qBAAU,WAGN,IAAIC,EAAW,IAAIC,IACnBD,EAASE,QAASC,OAAOC,WAAYD,OAAOE,aAC5CL,EAAS+B,cAAe5B,OAAO6B,kBAI/B,IAAIvB,EAAQ,IAAIR,IACZK,EAAS,IAAIL,IAAwB,GAAIE,OAAOC,WAAWD,OAAOE,YAAa,GAAK,KACxFC,EAAOC,SAASC,EAAI,EACpBF,EAAOC,SAASiB,EAAI,GAGpBxB,EAASyB,OAAQhB,EAAOH,GCFL,SAAEG,GACzB,IAAIwB,EAAW,IAAIhC,IAAuB,SAAU,GACpDgC,EAAS1B,SAASY,KAAM,EAAG,EAAG,GAC9BV,EAAMQ,IAAKgB,GAEX,IAAIC,EAAY,IAAIjC,IAAsB,SAAU,QAAU,GAC9DQ,EAAMQ,IAAKiB,GDDPC,CAAa1B,GC1BO,SAAEA,EAAoBT,EAA0BM,GACxE,IAAI8B,EAAS,IAAInC,IAAmB,EAAG,EAAG,GACtCoC,EAAS,IAAIpC,IAAwB,CACrCW,MAAO,WAEP0B,EAAU,IAAIrC,IAAYmC,EAAQC,GACtC5B,EAAMQ,IAAKqB,GAEQ,SAAbC,IACFlB,sBAAuBkB,GAEvBD,EAAQhB,SAASC,GAAK,EACtBe,EAAQhB,SAASE,GAAK,EAEtBxB,EAASyB,OAAQhB,EAAOH,GAG5BiC,GDYIC,CAAc/B,EAAOT,EAAUM,MAK/B,qBAAKoB,MAAO,CAACC,OAAQ,SAAUC,QAAS,YENjCa,MAzBf,WACE,OACE,qCACE,2BAGA,+BACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,QAAZ,SACE,cAAC,EAAD,aAKR,+BCTSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAAS3B,OACP,cAAC,IAAM4B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e9351470.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport * as THREE from \"three\";\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\nexport const ThreeJSGameContainer: React.FC<IProps> = () => {\r\n\r\n    // Three JS code is all below\r\n    useEffect(() => {\r\n        \r\n        // Renderer setup\r\n        let renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize( window.innerWidth, window.innerHeight );\r\n        //document.body.appendChild( renderer.domElement );\r\n\r\n        // Camera setup\r\n        let camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\r\n        camera.position.z = 5;\r\n\r\n        let scene = new THREE.Scene();\r\n\r\n        // Cube setup\r\n        let geometry = new THREE.BoxGeometry( 2, 1.5, 1.5 );\r\n        let material = new THREE.MeshPhongMaterial( { \r\n            color: 0x156289,\r\n            emissive: 0x072534,\r\n            side: THREE.DoubleSide,\r\n            flatShading: true\r\n         } );\r\n        let cube = new THREE.Mesh( geometry, material );\r\n        scene.add( cube );\r\n        \r\n        // Light setup\r\n        let lightIntesity = 1;\r\n        let light = new THREE.DirectionalLight(0xFFFFFF, lightIntesity);\r\n        light.position.set(-1, 2, 4);\r\n        scene.add( light );\r\n\r\n        // Input setup\r\n\r\n\r\n        let animate = () => {\r\n            requestAnimationFrame( animate );\r\n            cube.rotation.x += 0.02;\r\n            cube.rotation.y += 0.01;\r\n            renderer.render( scene, camera );\r\n        };\r\n        \r\n        animate();\r\n    });\r\n\r\n    return (\r\n        <div style={{margin: \"0 auto\", display: \"block\"}}>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport * as THREE from \"three\";\r\nimport { setupLights, setupObjects } from './HomePageFunctions';\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\nexport const ThreeJSHomePage: React.FC<IProps> = (props:IProps) => {\r\n\r\n    useEffect(()=>{\r\n\r\n        // Renderer setup\r\n        let renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize( window.innerWidth, window.innerHeight);\r\n        renderer.setPixelRatio( window.devicePixelRatio );\r\n        //document.body.appendChild( renderer.domElement );\r\n\r\n        // Camera / Scene setup\r\n        let scene = new THREE.Scene();\r\n        let camera = new THREE.PerspectiveCamera(40, window.innerWidth/window.innerHeight, 0.1, 1000);\r\n        camera.position.z = 5;\r\n        camera.position.y = 0.3;\r\n\r\n        // Render function babyyyyy\r\n        renderer.render( scene, camera );\r\n\r\n        // Light setup\r\n        setupLights( scene );\r\n        \r\n        // Object placement/animation/inputs\r\n        setupObjects( scene, renderer, camera );\r\n\r\n    });\r\n\r\n    return(\r\n        <div style={{margin: \"0 auto\", display: \"block\"}}>\r\n        </div>\r\n    )\r\n}","import * as THREE from \"three\";\r\n\r\nexport const setupObjects = ( scene: THREE.Scene, renderer: THREE.Renderer, camera: THREE.Camera ) => {\r\n    let boxGeo = new THREE.BoxGeometry( 1, 1, 1);\r\n    let boxMat = new THREE.MeshPhongMaterial({\r\n        color: 0xaaff00,\r\n    });\r\n    let tempBox = new THREE.Mesh( boxGeo, boxMat );\r\n    scene.add( tempBox );\r\n\r\n    const animateBox = () => {\r\n        requestAnimationFrame( animateBox );\r\n        \r\n        tempBox.rotation.x += 1;\r\n        tempBox.rotation.y += 1;\r\n\r\n        renderer.render( scene, camera );\r\n    }\r\n\r\n    animateBox();\r\n\r\n}\r\n\r\nexport const setupLights = ( scene: THREE.Scene ) => {\r\n    let dirLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    dirLight.position.set( -1, 2, 4 );\r\n    scene.add( dirLight );\r\n\r\n    let hemiLight = new THREE.HemisphereLight(0xffffff, 0x232323, 1);\r\n    scene.add( hemiLight );\r\n}","import React from 'react';\nimport { ThreeJSGameContainer } from '../src/components/ThreeJSGameContainer';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { ThreeJSHomePage } from './components/ThreeJSHomePage';\n\nfunction App() {\n  return (\n    <>\n      <header>\n\n      </header>\n      <body>\n        <BrowserRouter>\n          <Switch>\n            <Route path='/'>\n              <ThreeJSHomePage />\n            </Route>\n            <Route path='/game'>\n              <ThreeJSGameContainer />\n            </Route>\n          </Switch>  \n        </BrowserRouter>\n      </body>\n      <footer>\n\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}