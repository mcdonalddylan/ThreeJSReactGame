{"version":3,"sources":["components/ThreeJSGameContainer.tsx","components/ThreeJSHomePage.tsx","components/HomePageFunctions.ts","redux/navActions.ts","components/NavBarContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx","redux/navReducers.ts"],"names":["ThreeJSGameContainer","props","useEffect","renderer","THREE","setSize","window","innerWidth","innerHeight","document","body","appendChild","domElement","camera","position","z","scene","geometry","material","color","emissive","side","flatShading","cube","add","light","set","animate","requestAnimationFrame","rotation","x","y","render","style","margin","display","ThreeJSHomePage","quality","useSelector","state","qualityState","console","log","setPixelRatio","devicePixelRatio","id","contains","getElementById","append","dom","removeChild","dirLight","hemiLight","setupLights","boxGeo","boxMat","tempBox","orbitControls","OrbitControls","addCube","geo","mat","box","Array","fill","map","randFloatSpread","cubeArray","i","push","animateBox","update","setupObjects","SET_QUALITY","setQuality","data","type","payload","NavBarContainer","dispatch","useDispatch","className","zIndex","onClick","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","composeEnhancer","compose","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.bc61effb.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport * as THREE from \"three\";\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\nexport const ThreeJSGameContainer: React.FC<IProps> = ( props: IProps ) => {\r\n\r\n    // Three JS code is all below\r\n    useEffect(() => {\r\n        \r\n        // Renderer setup\r\n        let renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize( window.innerWidth, window.innerHeight );\r\n        document.body.appendChild( renderer.domElement );\r\n\r\n        // Camera setup\r\n        let camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\r\n        camera.position.z = 5;\r\n\r\n        let scene = new THREE.Scene();\r\n\r\n        // Cube setup\r\n        let geometry = new THREE.BoxGeometry( 2, 1.5, 1.5 );\r\n        let material = new THREE.MeshPhongMaterial( { \r\n            color: 0x156289,\r\n            emissive: 0x072534,\r\n            side: THREE.DoubleSide,\r\n            flatShading: true\r\n         } );\r\n        let cube = new THREE.Mesh( geometry, material );\r\n        scene.add( cube );\r\n        \r\n        // Light setup\r\n        let lightIntesity = 1;\r\n        let light = new THREE.DirectionalLight(0xFFFFFF, lightIntesity);\r\n        light.position.set(-1, 2, 4);\r\n        scene.add( light );\r\n\r\n        // Input setup\r\n\r\n\r\n        let animate = () => {\r\n            requestAnimationFrame( animate );\r\n            cube.rotation.x += 0.02;\r\n            cube.rotation.y += 0.01;\r\n            renderer.render( scene, camera );\r\n        };\r\n        \r\n        animate();\r\n    });\r\n\r\n    return (\r\n        <div style={{margin: \"0 auto\", display: \"block\"}}>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport * as THREE from \"three\";\r\nimport { setupLights, setupObjects } from './HomePageFunctions';\r\nimport '../components/HomePage.scss';\r\nimport { useSelector } from 'react-redux';\r\nimport { IState } from '..';\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\nexport const ThreeJSHomePage: React.FC<IProps> = ( props: IProps ) => {\r\n\r\n    const quality: any = useSelector<IState>(state=>state.qualityState);\r\n    console.log(`quality: `, quality);\r\n\r\n    useEffect(()=>{\r\n\r\n        // Renderer setup\r\n        let renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize( window.innerWidth, window.innerHeight);\r\n        renderer.setPixelRatio( window.devicePixelRatio/quality );\r\n\r\n        renderer.domElement.id = 'dom';\r\n        if (document.body.contains( document.getElementById( 'dom' ) ) === false) {\r\n            document.body.append( renderer.domElement );\r\n        } else {\r\n            const dom = document.getElementById('dom');\r\n            if(dom !== null) {\r\n                document.body.removeChild( dom );\r\n                document.body.append( renderer.domElement );\r\n            } \r\n        }\r\n\r\n        // Camera / Scene setup\r\n        let scene = new THREE.Scene();\r\n        let camera = new THREE.PerspectiveCamera(40, window.innerWidth/window.innerHeight, 0.1, 1000);\r\n        camera.position.z = 5;\r\n        camera.position.y = 0.3;\r\n\r\n        // Light setup\r\n        setupLights( scene );\r\n        \r\n        // Object placement/animation/inputs\r\n        setupObjects( scene, renderer, camera, quality );\r\n\r\n        // Render function babyyyyy\r\n        renderer.render( scene, camera );\r\n\r\n    });\r\n\r\n    return(\r\n        <></>\r\n    )\r\n}","import * as THREE from \"three\";\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\n\r\nexport const setupObjects = ( scene: THREE.Scene, renderer: THREE.Renderer, camera: THREE.Camera, quality: any ) => {\r\n    let boxGeo = new THREE.BoxGeometry( 0.7, 0.7, 0.7);\r\n    let boxMat = new THREE.MeshPhongMaterial({\r\n        color: 0x44ff22,\r\n    });\r\n    let tempBox = new THREE.Mesh( boxGeo, boxMat );\r\n    tempBox.position.set( 0, -0.75, 0 );\r\n    scene.add( tempBox );\r\n\r\n    // Input setup\r\n    const orbitControls = new OrbitControls( camera, renderer.domElement );\r\n\r\n    // Adding a bunch of random green cubes everywhere\r\n    const addCube = (): THREE.Mesh => {\r\n        const geo = new THREE.BoxGeometry(0.5, 0.5, 0.5);\r\n        const mat = new THREE.MeshStandardMaterial({\r\n            color: 0x004400,\r\n        });\r\n        const box = new THREE.Mesh( geo, mat);\r\n        const [x, y, z] = Array(3).fill(0).map(() => THREE.MathUtils.randFloatSpread( 150 ));\r\n        box.position.set(x,y,z);\r\n        scene.add(box);\r\n        return box;\r\n    }\r\n\r\n    let cubeArray: THREE.Mesh[] = [];\r\n    for(let i = 0; i < 350/quality; i++){\r\n        cubeArray.push(addCube());\r\n    }\r\n\r\n    // Animation setup\r\n    const animateBox = () => {\r\n        requestAnimationFrame( animateBox );\r\n        \r\n        tempBox.rotation.x += 0.01;\r\n        tempBox.rotation.y += 0.015;\r\n\r\n        // animating the background cubes\r\n        for(let i = 0; i < 350/quality; i++){\r\n            cubeArray[i].position.y += 0.03;\r\n\r\n            if(i%2 === 0){\r\n                cubeArray[i].rotation.x += 0.02;\r\n            } else {\r\n                cubeArray[i].rotation.x -= 0.02;\r\n            }\r\n            \r\n            if(cubeArray[i].position.y > 80){\r\n                cubeArray[i].position.y = -80;\r\n            }\r\n        }\r\n\r\n        orbitControls.update();\r\n\r\n        renderer.render( scene, camera );\r\n    }\r\n\r\n    animateBox();\r\n\r\n}\r\n\r\nexport const setupLights = ( scene: THREE.Scene ) => {\r\n    let dirLight = new THREE.DirectionalLight(0xffffff, 1);\r\n    dirLight.position.set( -1, 2, 4 );\r\n    scene.add( dirLight );\r\n\r\n    // Directional light helper (temp af)\r\n    const helpDirLight = new THREE.DirectionalLightHelper( dirLight );\r\n    //scene.add( helpDirLight );\r\n\r\n    let hemiLight = new THREE.HemisphereLight(0xffffff, 0x232323, 1);\r\n    scene.add( hemiLight );\r\n}","export const SET_QUALITY = 'SET_QUALITY';\r\n\r\nexport const setQuality = (data:number) => {\r\n    return {\r\n        type: SET_QUALITY,\r\n        payload: data\r\n    };\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setQuality } from '../redux/navActions';\r\nimport '../components/NavBarContainer.scss';\r\nimport { IState } from '..';\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\nexport const NavBarContainer: React.FC<IProps> = (props:IProps) => {\r\n\r\n    const quality: any = useSelector<IState>(state=>state.qualityState);\r\n    const dispatch = useDispatch();\r\n    console.log(`quality: `, quality);\r\n\r\n    return(\r\n        <div className=\"container\" style={{margin: \"0 auto\", position: \"fixed\"}}>\r\n            <div className=\"row justify-content-center\" style={{ zIndex: 3 }}>\r\n                <div className=\"col-3\">\r\n                    <button onClick={()=>{\r\n                        if(quality === 1){\r\n                            dispatch(setQuality(2.5));\r\n                        } else {\r\n                            dispatch(setQuality(1));\r\n                        }\r\n                    }} className=\"qual-btn\" >Quality</button>\r\n                </div>               \r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport { ThreeJSGameContainer } from '../src/components/ThreeJSGameContainer';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { ThreeJSHomePage } from './components/ThreeJSHomePage';\nimport { NavBarContainer } from './components/NavBarContainer';\n\nfunction App() {\n  return (\n    <>\n      <header>\n        <NavBarContainer />\n      </header>\n      <body>\n        <BrowserRouter>\n          <Switch>\n            <Route path='/' exact>\n              <ThreeJSHomePage />\n            </Route>\n            <Route path='/game'>\n              <ThreeJSGameContainer />\n            </Route>\n          </Switch>  \n        </BrowserRouter>\n      </body>\n      <footer>\n\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { qualityReducer } from './redux/navReducers';\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\n\nexport interface IState {\n  qualityState: any\n}\n\nconst a: any = window;\n\nconst composeEnhancer =\n  (a[\"__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\"] as typeof compose) || compose;\n\nexport const state = combineReducers<IState>({\n  qualityState: qualityReducer,\n});\n\nconst store = createStore(\n  state,\n  composeEnhancer(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { SET_QUALITY } from \"./navActions\";\r\n\r\nexport const qualityReducer = (state: number = 2.5, action: any) => {\r\n\r\n    switch(action.type){\r\n        case SET_QUALITY:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}"],"sourceRoot":""}